name: Build, Push, and Deploy to ECS

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

concurrency:
  group: ecr-deploy-${{ github.ref }}
  cancel-in-progress: false

env:
  # --- Configuration Pulled from GitHub Repository Variables ---
  # This section now references the variables you've set in your
  # repository's settings (Settings > Secrets and variables > Actions > Variables).
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  START_VERSION: ${{ vars.START_VERSION }}
  ECS_SERVICE: ${{ vars.SERVICE_NAME }}
  ECS_CLUSTER: ${{ vars.CLUSTER_NAME }}
  TASK_FAMILY: ${{ vars.TASK_FAMILY }}
  CONTAINER_NAME: ${{ vars.CONTAINER_NAME }}
  ECS_TASK_DEFINITION: task-definition.json # Local filename for the task definition

jobs:
  build-push-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Install jq (for version parsing)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Compute next version from ECR (patch bump)
        id: version
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        shell: bash
        run: |
          # This script correctly computes the next patch version.
          # No changes were needed here.
          set -euo pipefail
          TAGS_JSON="$(aws ecr describe-images --repository-name "${ECR_REPOSITORY}" --query 'imageDetails[].imageTags' --output json 2>/dev/null || echo '[]')"
          HIGHEST="$(echo "${TAGS_JSON}" | jq -r '[ .[]? | .[]? | select(test("^[0-9]+\\.[0-9]+\\.[0-9]+$")) ] | sort_by( split(".") | map(tonumber) ) | last // empty')"
          if [[ -z "${HIGHEST}" ]]; then
            NEXT="${START_VERSION}"
            echo "No numeric tags found, starting at ${NEXT}"
          else
            IFS='.' read -r MA MI PA <<< "${HIGHEST}"
            NEXT="${MA}.${MI}.$((PA+1))"
            echo "Highest existing tag: ${HIGHEST} -> next: ${NEXT}"
          fi
          if aws ecr list-images --repository-name "${ECR_REPOSITORY}" --filter tagStatus=TAGGED --query 'imageIds[].imageTag' --output text | grep -qx "${NEXT}"; then
            echo "Computed tag ${NEXT} already exists. Exiting to respect immutability." >&2
            exit 1
          fi
          echo "next=${NEXT}" >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Compute build timestamp
        id: buildmeta
        run: echo "created=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> "$GITHUB_OUTPUT"

      - name: Build & Push Docker image to ECR
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.version.outputs.next }}
          labels: |
            org.opencontainers.image.created=${{ steps.buildmeta.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ steps.version.outputs.next }}
            org.opencontainers.image.source=${{ github.repository }}
          cache-from: type=gha,scope=ecr-main
          cache-to: type=gha,mode=max,scope=ecr-main
          provenance: false
      
      # --- DEPLOYMENT STEPS ---

      - name: Download task definition
        id: download-task-def
        run: |
          # UPDATED: This now correctly uses the TASK_FAMILY to fetch the
          # latest active task definition revision from AWS.
          aws ecs describe-task-definition --task-definition ${{ env.TASK_FAMILY }} --query taskDefinition > ${{ env.ECS_TASK_DEFINITION }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.version.outputs.next }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Summary
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          TAG: ${{ steps.version.outputs.next }}
        run: |
          echo "### âœ… Build and Deploy Succeeded" >> $GITHUB_STEP_SUMMARY
          echo "- **Image pushed:** \`${ECR_REGISTRY}/${ECR_REPOSITORY}:${TAG}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed to:** `${{ env.ECS_CLUSTER }}` / `${{ env.ECS_SERVICE }}`" >> $GITHUB_STEP_SUMMARY


      - name: Notify Slack (incoming webhook)
        if: ${{ success() }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          TAG: ${{ steps.version.outputs.next }}
        run: |
          set -euo pipefail
          sudo apt-get update >/dev/null && sudo apt-get install -y jq >/dev/null
          IMAGE="${ECR_REGISTRY}/${ECR_REPOSITORY}:${TAG}"
          SHORT_SHA="${GITHUB_SHA::7}"
          RUN_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"

          payload=$(jq -n \
            --arg header ":whale: *Docker image pushed to ECR*" \
            --arg image "$IMAGE" \
            --arg tag "$TAG" \
            --arg repo "$GITHUB_REPOSITORY" \
            --arg sha "$SHORT_SHA" \
            --arg run "$RUN_URL" \
            '{text:$header, blocks:[
              {type:"section", text:{type:"mrkdwn", text:$header}},
              {type:"section", fields:[
                {type:"mrkdwn", text:"*Image:*\n\($image)"},
                {type:"mrkdwn", text:"*Tag:*\n\($tag)"},
                {type:"mrkdwn", text:"*Repo:*\n\($repo)"},
                {type:"mrkdwn", text:"*Commit:*\n\($sha)"},
                {type:"mrkdwn", text:"*Workflow run:*\n\($run)"}
              ]}
            ]}')
          curl -X POST -H 'Content-type: application/json' \
               --data "$payload" "$SLACK_WEBHOOK_URL"

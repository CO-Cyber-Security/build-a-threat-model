name: Build & Push Docker image to ECR

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

concurrency:
  group: ecr-${{ github.ref }}
  cancel-in-progress: false

env:
  AWS_REGION: eu-west-2
  ECR_REPOSITORY: batm-staging-docker-image
  START_VERSION: 1.0.0

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Install jq (for version parsing)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Compute next version from ECR (patch bump)
        id: version
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        shell: bash
        run: |
          set -euo pipefail

          TAGS_JSON="$(aws ecr describe-images \
            --repository-name "${ECR_REPOSITORY}" \
            --query 'imageDetails[].imageTags' --output json 2>/dev/null || echo '[]')"

          HIGHEST="$(echo "${TAGS_JSON}" \
            | jq -r '
              [ .[]? | .[]? | select(test("^[0-9]+\\.[0-9]+\\.[0-9]+$")) ]
              | sort_by( split(".") | map(tonumber) )
              | last // empty
            ')"

          if [[ -z "${HIGHEST}" ]]; then
            NEXT="${START_VERSION}"
            echo "No numeric tags found, starting at ${NEXT}"
          else
            IFS='.' read -r MA MI PA <<< "${HIGHEST}"
            NEXT="${MA}.${MI}.$((PA+1))"
            echo "Highest existing tag: ${HIGHEST} -> next: ${NEXT}"
          fi

          if aws ecr list-images --repository-name "${ECR_REPOSITORY}" \
               --filter tagStatus=TAGGED --query 'imageIds[].imageTag' --output text \
               | grep -qx "${NEXT}"; then
            echo "Computed tag ${NEXT} already exists. Exiting to respect immutability." >&2
            exit 1
          fi

          echo "next=${NEXT}" >> "$GITHUB_OUTPUT"

      - name: Build Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          TAG: ${{ steps.version.outputs.next }}
        run: |
          docker build -f Dockerfile \
            -t "${ECR_REGISTRY}/${ECR_REPOSITORY}:${TAG}" \
            .

      - name: Push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          TAG: ${{ steps.version.outputs.next }}
        run: |
          docker push "${ECR_REGISTRY}/${ECR_REPOSITORY}:${TAG}"
          echo "Pushed ${ECR_REGISTRY}/${ECR_REPOSITORY}:${TAG}"

      - name: Summary
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          TAG: ${{ steps.version.outputs.next }}
        run: |
          echo "### Image pushed" >> $GITHUB_STEP_SUMMARY
          echo "- \`${ECR_REGISTRY}/${ECR_REPOSITORY}:${TAG}\`" >> $GITHUB_STEP_SUMMARY

      - name: Notify Slack (incoming webhook)
        if: ${{ success() }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          TAG: ${{ steps.version.outputs.next }}
        run: |
          set -euo pipefail
          sudo apt-get update >/dev/null && sudo apt-get install -y jq >/dev/null
          IMAGE="${ECR_REGISTRY}/${ECR_REPOSITORY}:${TAG}"
          SHORT_SHA="${GITHUB_SHA::7}"
          RUN_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"

          payload=$(jq -n \
            --arg header ":whale: *Docker image pushed to ECR*" \
            --arg image "$IMAGE" \
            --arg tag "$TAG" \
            --arg repo "$GITHUB_REPOSITORY" \
            --arg sha "$SHORT_SHA" \
            --arg run "$RUN_URL" \
            '{text:$header, blocks:[
              {type:"section", text:{type:"mrkdwn", text:$header}},
              {type:"section", fields:[
                {type:"mrkdwn", text:"*Image:*\n\($image)"},
                {type:"mrkdwn", text:"*Tag:*\n\($tag)"},
                {type:"mrkdwn", text:"*Repo:*\n\($repo)"},
                {type:"mrkdwn", text:"*Commit:*\n\($sha)"},
                {type:"mrkdwn", text:"*Workflow run:*\n\($run)"}
              ]}
            ]}')

          curl -X POST -H 'Content-type: application/json' \
               --data "$payload" "$SLACK_WEBHOOK_URL"

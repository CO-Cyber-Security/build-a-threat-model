name: Build, Push & Deploy to ECS

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: ecr-deploy-${{ github.ref }}
  cancel-in-progress: false

env:
  AWS_REGION:       ${{ vars.AWS_REGION }}
  ECR_REPOSITORY:   ${{ vars.ECR_REPOSITORY }}
  START_VERSION:    ${{ vars.START_VERSION }}
  CLUSTER_NAME:     ${{ vars.CLUSTER_NAME }}
  SERVICE_NAME:     ${{ vars.SERVICE_NAME }}
  TASK_FAMILY:      ${{ vars.TASK_FAMILY }}
  CONTAINER_NAME:   ${{ vars.CONTAINER_NAME }}
  TD_FILE:          task-definition.json

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Install prerequisites
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      # -------- versioning (patch bump) --------
      - name: Compute next version from ECR
        id: version
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        shell: bash
        run: |
          set -euo pipefail
          TAGS_JSON="$(aws ecr describe-images \
            --repository-name "${ECR_REPOSITORY}" \
            --query 'imageDetails[].imageTags' --output json 2>/dev/null || echo '[]')"

          HIGHEST="$(echo "${TAGS_JSON}" \
            | jq -r '[ .[]? | .[]? | select(test("^[0-9]+\\.[0-9]+\\.[0-9]+$")) ]
                      | sort_by( split(".") | map(tonumber) )
                      | last // empty')"

          if [[ -z "${HIGHEST}" ]]; then
            NEXT="${START_VERSION}"
          else
            IFS='.' read -r MA MI PA <<< "${HIGHEST}"
            NEXT="${MA}.${MI}.$((PA+1))"
          fi

          # immutability safety
          if aws ecr list-images --repository-name "${ECR_REPOSITORY}" \
               --filter tagStatus=TAGGED --query 'imageIds[].imageTag' --output text \
               | grep -qx "${NEXT}"; then
            echo "Computed tag ${NEXT} already exists" >&2
            exit 1
          fi

          echo "next=${NEXT}" >> "$GITHUB_OUTPUT"
          echo "New tag: ${NEXT}"

      # -------- build & push (cached) --------
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push image
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.version.outputs.next }}
          cache-from: type=gha,scope=ecr-main
          cache-to: type=gha,mode=max,scope=ecr-main
          provenance: false
          labels: |
            org.opencontainers.image.version=${{ steps.version.outputs.next }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=${{ github.repository }}

      # -------- deploy to ECS --------
      - name: Download current task definition
        run: |
          # get the latest ACTIVE revision for the family
          aws ecs describe-task-definition \
            --task-definition "${TASK_FAMILY}" \
            --query taskDefinition > td.json

          # strip read-only fields so we can re-register
          jq 'del(.taskDefinitionArn,.revision,.status,.requiresAttributes,
                  .compatibilities,.registeredAt,.registeredBy)' td.json > "${TD_FILE}"

      - name: Render task definition with new image
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.TD_FILE }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.version.outputs.next }}

      - name: Deploy new task definition to ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.SERVICE_NAME }}
          cluster: ${{ env.CLUSTER_NAME }}
          wait-for-service-stability: true

      # -------- summary & (optional) Slack --------
      - name: Summary
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          TAG: ${{ steps.version.outputs.next }}
        run: |
          echo "### âœ… Build & Deploy Succeeded" >> $GITHUB_STEP_SUMMARY
          echo "- Image: \`${ECR_REGISTRY}/${ECR_REPOSITORY}:${TAG}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Cluster/Service: \`${CLUSTER_NAME}\` / \`${SERVICE_NAME}\`" >> $GITHUB_STEP_SUMMARY

      - name: Notify Slack (optional)
        if: ${{ success() && secrets.SLACK_WEBHOOK_URL != '' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.version.outputs.next }}
        run: |
          payload=$(jq -n --arg t ":whale: Deployed *$IMAGE* to *${CLUSTER_NAME}/${SERVICE_NAME}*" '{text:$t}')
          curl -X POST -H 'Content-type: application/json' --data "$payload" "$SLACK_WEBHOOK_URL"

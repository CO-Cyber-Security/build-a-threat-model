name: Build, Push, and Deploy to ECS

on:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

concurrency:
  group: ecr-deploy-${{ github.ref }}
  cancel-in-progress: false

env:
  AWS_REGION:       ${{ vars.AWS_REGION }}
  ECR_REPOSITORY:   ${{ vars.ECR_REPOSITORY }}
  START_VERSION:    ${{ vars.START_VERSION }}
  ECS_SERVICE:      ${{ vars.SERVICE_NAME }}
  ECS_CLUSTER:      ${{ vars.CLUSTER_NAME }}
  TASK_FAMILY:      ${{ vars.TASK_FAMILY }}
  CONTAINER_NAME:   ${{ vars.CONTAINER_NAME }}
  ECS_TASK_DEFINITION: task-definition.json

jobs:
  # ────────────────────────────────────────────
  # Stage 1: Checkout (separate box)
  # ────────────────────────────────────────────
  prepare:
    name: checkout
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

  # ────────────────────────────────────────────
  # Stage 2: Build & Push (login → build → push)
  # ────────────────────────────────────────────
  build-and-push:
    name: build-and-push
    runs-on: ubuntu-latest
    needs: [prepare]
    outputs:
      image:    ${{ steps.out.outputs.image }}
      tag:      ${{ steps.version.outputs.next }}
      registry: ${{ steps.login-ecr.outputs.registry }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Install jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Compute next version from ECR (patch bump)
        id: version
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        shell: bash
        run: |
          set -euo pipefail
          TAGS_JSON="$(aws ecr describe-images --repository-name "${ECR_REPOSITORY}" --query 'imageDetails[].imageTags' --output json 2>/dev/null || echo '[]')"
          HIGHEST="$(echo "${TAGS_JSON}" | jq -r '[ .[]? | .[]? | select(test("^[0-9]+\\.[0-9]+\\.[0-9]+$")) ] | sort_by( split(".") | map(tonumber) ) | last // empty')"
          if [[ -z "${HIGHEST}" ]]; then
            NEXT="${START_VERSION}"
          else
            IFS='.' read -r MA MI PA <<< "${HIGHEST}"
            NEXT="${MA}.${MI}.$((PA+1))"
          fi
          if aws ecr list-images --repository-name "${ECR_REPOSITORY}" --filter tagStatus=TAGGED --query 'imageIds[].imageTag' --output text | grep -qx "${NEXT}"; then
            echo "Computed tag ${NEXT} already exists." >&2
            exit 1
          fi
          echo "next=${NEXT}" >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Compute build timestamp
        id: buildmeta
        run: echo "created=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> "$GITHUB_OUTPUT"

      - name: Build & Push Docker image to ECR
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          # (leave platforms unset to use the runner arch you’ve already aligned to)
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.version.outputs.next }}
          labels: |
            org.opencontainers.image.created=${{ steps.buildmeta.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ steps.version.outputs.next }}
            org.opencontainers.image.source=${{ github.repository }}
          cache-from: type=gha,scope=ecr-main
          cache-to:   type=gha,mode=max,scope=ecr-main
          provenance: false

      - name: Expose image output
        id: out
        run: |
          echo "image=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.version.outputs.next }}" >> "$GITHUB_OUTPUT"

  # ────────────────────────────────────────────
  # Stage 3: Notify (image built)
  # ────────────────────────────────────────────
  notify-build:
    name: notify-image-built
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: ${{ success() }}
    steps:
      - name: Notify Slack (image built)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          IMAGE:   ${{ needs.build-and-push.outputs.image }}
          REG:     ${{ needs.build-and-push.outputs.registry }}
          REPO:    ${{ env.ECR_REPOSITORY }}
          TAG:     ${{ needs.build-and-push.outputs.tag }}
        run: |
          sudo apt-get update -y >/dev/null && sudo apt-get install -y jq >/dev/null
          payload=$(jq -n \
            --arg header ":whale: *Docker image built & pushed*" \
            --arg image "$IMAGE" \
            '{text:$header, blocks:[
              {type:"section", text:{type:"mrkdwn", text:$header}},
              {type:"section", fields:[
                {type:"mrkdwn", text:"*Image:*\n\($image)"}
              ]}
            ]}')
          curl -X POST -H 'Content-type: application/json' --data "$payload" "$SLACK_WEBHOOK_URL"

  # ────────────────────────────────────────────
  # Stage 4: Deploy to ECS
  # ────────────────────────────────────────────
  deploy-ecs:
    name: deploy-ecs
    runs-on: ubuntu-latest
    needs: [build-and-push]
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Validate ECS names (quick sanity)
        run: |
          set -euo pipefail
          echo "Cluster: ${ECS_CLUSTER}  Service: ${ECS_SERVICE}  Family: ${TASK_FAMILY}  Container: ${CONTAINER_NAME}"
          aws ecs describe-clusters --clusters "$ECS_CLUSTER" --query 'clusters[].status'
          aws ecs describe-services --cluster "$ECS_CLUSTER" --services "$ECS_SERVICE" --query 'services[].status'

      - name: Download & sanitize task definition
        run: |
          set -euo pipefail
          aws ecs describe-task-definition \
            --task-definition "${TASK_FAMILY}" \
            --query taskDefinition > td.raw.json
          jq 'del(
              .taskDefinitionArn,
              .revision,
              .status,
              .requiresAttributes,
              .compatibilities,
              .registeredAt,
              .registeredBy
            )' td.raw.json > "${ECS_TASK_DEFINITION}"

      - name: Render task definition with new image
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ needs.build-and-push.outputs.image }}

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  # ────────────────────────────────────────────
  # Stage 5: Notify (deployed)
  # ────────────────────────────────────────────
  notify-deploy:
    name: notify-deployed
    runs-on: ubuntu-latest
    needs: [deploy-ecs, build-and-push]
    if: ${{ success() }}
    steps:
      - name: Notify Slack (deployed to ECS)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          IMAGE: ${{ needs.build-and-push.outputs.image }}
          RUN_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          SHORT_SHA: "${{ github.sha }}"

        run: |
          sudo apt-get update -y >/dev/null && sudo apt-get install -y jq >/dev/null
          payload=$(jq -n \
            --arg header ":rocket: *Deployed to ECS successfully*" \
            --arg image "$IMAGE" \
            --arg run "$RUN_URL" \
            --arg sha "${SHORT_SHA::7}" \
            '{text:$header, blocks:[
              {type:"section", text:{type:"mrkdwn", text:$header}},
              {type:"section", fields:[
                {type:"mrkdwn", text:"*Image:*\n\($image)"},
                {type:"mrkdwn", text:"*Workflow run:*\n\($run)"},
                {type:"mrkdwn", text:"*Commit:*\n\($sha)"}
              ]}
            ]}')
          curl -X POST -H 'Content-type: application/json' --data "$payload" "$SLACK_WEBHOOK_URL"
